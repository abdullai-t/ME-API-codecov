# Generated by Django 2.2 on 2019-04-14 18:32

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        # ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Communities',
                'db_table': 'communities',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(max_length=10000)),
                ('start_date_and_time', models.DateTimeField(default=datetime.datetime.now)),
                ('end_date_and_time', models.DateTimeField(default=datetime.datetime.now)),
                ('location', models.CharField(max_length=100)),
                ('archive', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'events',
                'ordering': ('-start_date_and_time',),
            },
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('I', 'In Progress'), ('N', 'Not Started'), ('C', 'Completed')], max_length=100)),
            ],
            options={
                'db_table': 'goals',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('body', models.CharField(blank=True, max_length=10000)),
            ],
            options={
                'db_table': 'notifications',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('permission_type', models.CharField(choices=[('A', 'Approve'), ('C', 'Create'), ('E', 'Edit'), ('F', 'Fork'), ('V', 'View')], max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'permissions',
                'ordering': ('permission_type',),
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('age_acknowledgment', models.BooleanField()),
                ('other_info', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='RealEstateUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_type', models.CharField(choices=[('C', 'Commercial'), ('R', 'Residential')], max_length=100)),
                ('street', models.CharField(max_length=100)),
                ('unit_number', models.CharField(max_length=100)),
                ('zipcode', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AS', 'American Samoa'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('DC', 'District Of Columbia'), ('FM', 'Federated States Of Micronesia'), ('FL', 'Florida'), ('GA', 'Georgia'), ('GU', 'Guam'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MH', 'Marshall Islands'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('MP', 'Northern Mariana Islands'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PW', 'Palau'), ('PA', 'Pennsylvania'), ('PR', 'Puerto Rico'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VI', 'Virgin Islands'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming')], max_length=100)),
            ],
            options={
                'db_table': 'real_estate_units',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role_type', models.CharField(choices=[('D', 'Default User'), ('P', 'Partner Admin'), ('N', 'Neighborhood Admin'), ('R', 'Unit Admin'), ('S', 'SuperAdmin'), ('T', 'Team Admin')], max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'roles',
                'ordering': ('role_type',),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('value', models.CharField(max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'tags',
                'ordering': ('value',),
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(max_length=10000)),
                ('admins', models.ManyToManyField(related_name='team_admins', to='database.Person')),
                ('goals', models.ManyToManyField(to='database.Goal')),
                ('members', models.ManyToManyField(related_name='team_members', to='database.Person')),
            ],
            options={
                'db_table': 'teams',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Policy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_do', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Permission')),
                ('who', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Role')),
            ],
            options={
                'db_table': 'policies',
                'ordering': ('who',),
            },
        ),
        migrations.AddField(
            model_name='person',
            name='address',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.RealEstateUnit'),
        ),
        migrations.AddField(
            model_name='person',
            name='community',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Community'),
        ),
        migrations.AddField(
            model_name='person',
            name='goals',
            field=models.ManyToManyField(to='database.Goal'),
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(blank=True, max_length=10000)),
                ('info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('community', models.ManyToManyField(to='database.Community')),
            ],
            options={
                'db_table': 'partners',
            },
        ),
        migrations.CreateModel(
            name='EventUserRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice', models.CharField(choices=[('I', 'Interested'), ('R', 'RSVP'), ('S', 'Save for Later')], max_length=100)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Person')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='tags',
            field=models.ManyToManyField(to='database.Tag'),
        ),
        migrations.CreateModel(
            name='ActionProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, unique=True)),
                ('short_description', models.CharField(blank=True, max_length=10000)),
                ('order_position', models.PositiveSmallIntegerField(default=0)),
                ('community', models.ManyToManyField(to='database.Community')),
            ],
            options={
                'verbose_name_plural': 'Properties',
                'db_table': 'action_properties',
                'ordering': ('order_position',),
            },
        ),
        migrations.CreateModel(
            name='ActionCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('icon', models.CharField(blank=True, max_length=100)),
                ('order_position', models.PositiveSmallIntegerField(default=0)),
                ('community', models.ManyToManyField(to='database.Community')),
            ],
            options={
                'verbose_name_plural': 'Action Categories',
                'db_table': 'action_categories',
                'ordering': ('order_position',),
            },
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('full_description_and_next_steps', models.TextField(blank=True, max_length=10000)),
                ('partnership_information', models.TextField(blank=True, max_length=10000)),
                ('order_position', models.PositiveSmallIntegerField(default=0)),
                ('category', models.ManyToManyField(to='database.ActionCategory')),
                ('community', models.ManyToManyField(to='database.Community')),
                ('partners', models.ManyToManyField(to='database.Partner')),
                ('properties', models.ManyToManyField(to='database.ActionProperty')),
            ],
            options={
                'db_table': 'actions',
                'ordering': ('order_position', 'title'),
            },
        ),
    ]
