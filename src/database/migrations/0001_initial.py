# Generated by Django 2.2.3 on 2019-07-18 13:24

import datetime
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(db_index=True, max_length=100)),
                ('is_global', models.BooleanField(default=False)),
                ('steps_to_take', models.TextField(blank=True, max_length=10000)),
                ('about', models.TextField(blank=True, max_length=10000)),
                ('geographic_area', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, max_length=100)),
                ('average_carbon_score', models.TextField(blank=True, max_length=100)),
                ('rank', models.PositiveSmallIntegerField(blank=True, default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'actions',
                'ordering': ['rank', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('subdomain', models.SlugField(max_length=100, unique=True)),
                ('owner', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('about_community', models.TextField(blank=True, max_length=10000)),
                ('is_geographically_focused', models.BooleanField(default=False)),
                ('location', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('more_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Communities',
                'db_table': 'communities',
            },
        ),
        migrations.CreateModel(
            name='Data',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('value', models.PositiveIntegerField(default=0)),
                ('symbol', models.CharField(blank=True, max_length=10000)),
                ('info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('community', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Community')),
            ],
            options={
                'verbose_name_plural': 'Data',
                'db_table': 'data',
                'ordering': ('name', 'value'),
            },
        ),
        migrations.CreateModel(
            name='EmailCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('is_global', models.BooleanField(default=False)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Community')),
            ],
            options={
                'verbose_name_plural': 'Email Categories',
                'db_table': 'email_categories',
                'unique_together': {('name', 'community')},
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(max_length=10000)),
                ('start_date_and_time', models.DateTimeField(db_index=True, default=datetime.datetime.now)),
                ('end_date_and_time', models.DateTimeField(default=datetime.datetime.now)),
                ('location', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('archive', models.BooleanField(default=False)),
                ('is_global', models.BooleanField(default=False)),
                ('external_link', models.CharField(blank=True, max_length=100)),
                ('is_external_event', models.BooleanField(default=False)),
                ('community', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Community')),
            ],
            options={
                'db_table': 'events',
                'ordering': ('-start_date_and_time',),
            },
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('IN_PROGRESS', 'In Progress'), ('NOT_STARTED', 'Not Started'), ('COMPLETE', 'Complete')], default='NOT_STARTED', max_length=15)),
                ('description', models.TextField(blank=True, max_length=10000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'goals',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('location_type', models.CharField(choices=[('STATE_ONLY', 'State Only'), ('ZIP_CODE_ONLY', 'Zip Code Only'), ('CITY_ONLY', 'City Only'), ('COUNTY_ONLY', 'County Only'), ('FULL_ADDRESS', 'FULL ADDRESS')], max_length=15)),
                ('street', models.CharField(blank=True, max_length=100)),
                ('unit_number', models.CharField(blank=True, max_length=100)),
                ('zipcode', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('county', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AS', 'American Samoa'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('DC', 'District Of Columbia'), ('FM', 'Federated States Of Micronesia'), ('FL', 'Florida'), ('GA', 'Georgia'), ('GU', 'Guam'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MH', 'Marshall Islands'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('MP', 'Northern Mariana Islands'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PW', 'Palau'), ('PA', 'Pennsylvania'), ('PR', 'Puerto Rico'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VI', 'Virgin Islands'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming')], max_length=100)),
                ('more_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'locations',
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.SlugField(max_length=100)),
                ('file', models.FileField(upload_to='media/')),
                ('media_type', models.CharField(choices=[('PDF', 'PDF'), ('IMG', 'Image'), ('VIDEO', 'Video'), ('UNKNOWN', 'Other')], default='UNKNOWN', max_length=100)),
            ],
            options={
                'db_table': 'media',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=10000, unique=True)),
                ('content', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(choices=[('APPROVE', 'Approve'), ('CREATE', 'Create'), ('EDIT', 'Edit'), ('FORK', 'Fork'), ('VIEW', 'View')], db_index=True, max_length=15)),
                ('description', models.TextField(blank=True, max_length=10000)),
            ],
            options={
                'db_table': 'permissions',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Policy',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=10000)),
                ('description', models.TextField(blank=True, max_length=10000)),
                ('is_global', models.BooleanField(default=False)),
                ('more_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Legal Policies',
                'db_table': 'legal_policies',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='RealEstateUnit',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('unit_type', models.CharField(choices=[('COMMERCIAL', 'Commercial'), ('RESIDENTIAL', 'Residential')], max_length=15)),
                ('location', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'real_estate_units',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(choices=[('COMMUNITY_ADMIN', 'Community Admin'), ('SUPER_ADMIN', 'Super Admin'), ('TEAM_ADMIN', 'Team Admin'), ('DEFAULT_USER', 'Default User'), ('VENDOR_ADMIN', 'Vendor Admin'), ('SUBSCRIBER', 'Subscriber')], max_length=15, unique=True)),
                ('description', models.TextField(blank=True, max_length=10000)),
            ],
            options={
                'db_table': 'roles',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(blank=True, max_length=10000)),
                ('service_location', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, max_length=100)),
                ('info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Media')),
            ],
            options={
                'db_table': 'services',
            },
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(db_index=True, max_length=254)),
                ('community', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Community')),
            ],
            options={
                'db_table': 'subscribers',
                'unique_together': {('email', 'community')},
            },
        ),
        migrations.CreateModel(
            name='TagCollection',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('is_global', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'tag_collections',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(db_index=True, max_length=100)),
                ('body', models.TextField(max_length=10000)),
                ('is_approved', models.BooleanField(default=False)),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('rank', models.PositiveSmallIntegerField(default=0)),
                ('file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Media')),
            ],
            options={
                'db_table': 'testimonials',
                'ordering': ('rank',),
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('full_name', models.CharField(blank=True, max_length=100, null=True)),
                ('preferred_name', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(db_index=True, max_length=100, unique=True)),
                ('user_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('is_super_admin', models.BooleanField(default=False)),
                ('is_community_admin', models.BooleanField(default=False)),
                ('is_vendor', models.BooleanField(default=False)),
                ('other_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('communities', models.ManyToManyField(blank=True, to='database.Community')),
                ('goals', models.ManyToManyField(blank=True, to='database.Goal')),
                ('real_estate_units', models.ManyToManyField(blank=True, related_name='user_real_estate_units', to='database.RealEstateUnit')),
                ('roles', models.ManyToManyField(blank=True, to='database.Role')),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(blank=True, max_length=10000)),
                ('address', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('service_area', models.CharField(choices=[('NATIONAL', 'National'), ('STATEWIDE', 'StateWide'), ('COUNTY', 'County'), ('TOWN', 'Town')], max_length=15)),
                ('properties_serviced', models.CharField(choices=[('RESIDENTIAL', 'Residential'), ('COMMERCIAL', 'Commercial')], max_length=15)),
                ('onboarding_date', models.DateTimeField(default=datetime.datetime.now)),
                ('verification_checklist', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('more_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('banner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vendor_banner', to='database.Media')),
                ('key_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='key_contact', to='database.UserProfile')),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vender_logo', to='database.Media')),
                ('onboarding_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='onboarding_contact', to='database.UserProfile')),
                ('services', models.ManyToManyField(blank=True, to='database.Service')),
            ],
            options={
                'db_table': 'vendors',
            },
        ),
        migrations.CreateModel(
            name='UserPermissions',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('can_do', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Permission')),
                ('who', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Role')),
            ],
            options={
                'db_table': 'user_permissions',
                'ordering': ('who',),
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('description', models.TextField(blank=True, max_length=10000)),
                ('community', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='database.Community')),
                ('members', models.ManyToManyField(blank=True, to='database.UserProfile')),
                ('permissions', models.ManyToManyField(blank=True, to='database.Permission')),
            ],
            options={
                'db_table': 'user_groups',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='UserActionRel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('TODO', 'TODO'), ('DONE', 'DONE'), ('SAVE FOR LATER', 'SAVE_FOR_LATER')], db_index=True, default='TODO', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Action')),
                ('real_estate_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.RealEstateUnit')),
                ('testimonial', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Testimonial')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.UserProfile')),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Vendor')),
            ],
            options={
                'ordering': ('status', 'user', 'action'),
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, max_length=10000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admins', models.ManyToManyField(blank=True, related_name='team_admins', to='database.UserProfile')),
                ('banner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_banner', to='database.Media')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Community')),
                ('goals', models.ManyToManyField(blank=True, to='database.Goal')),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_logo', to='database.Media')),
                ('members', models.ManyToManyField(blank=True, related_name='team_members', to='database.UserProfile')),
            ],
            options={
                'db_table': 'teams',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('icon', models.CharField(blank=True, max_length=100)),
                ('tag_collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.TagCollection')),
            ],
            options={
                'db_table': 'tags',
                'ordering': ('name',),
                'unique_together': {('name', 'tag_collection')},
            },
        ),
        migrations.CreateModel(
            name='SubscriberEmailPreference',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('subscribed_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.EmailCategory')),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Subscriber')),
            ],
            options={
                'db_table': 'subscriber_email_preferences',
            },
        ),
        migrations.CreateModel(
            name='SliderImage',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, db_index=True, max_length=10000)),
                ('subtitle', models.CharField(blank=True, max_length=10000)),
                ('buttons', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Media')),
            ],
            options={
                'verbose_name_plural': 'Slider Images',
                'db_table': 'slider_images',
            },
        ),
        migrations.CreateModel(
            name='Slider',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_index=True, max_length=10000)),
                ('description', models.CharField(blank=True, max_length=10000)),
                ('is_global', models.BooleanField(default=False)),
                ('community', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='database.Community')),
                ('slides', models.ManyToManyField(blank=True, to='database.SliderImage')),
            ],
        ),
        migrations.CreateModel(
            name='PageSection',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=10000)),
                ('info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Media')),
                ('slider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Slider')),
            ],
        ),
        migrations.CreateModel(
            name='Graph',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(db_index=True, max_length=10000)),
                ('graph_type', models.CharField(choices=[('LINE_CHART', 'Line Chart'), ('PIE_CHART', 'Pie Chart'), ('BAR_CHART', 'Bar Chart')], max_length=15)),
                ('community', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Community')),
                ('data', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Data')),
            ],
            options={
                'verbose_name_plural': 'Graphs',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='EventAttendee',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('INTERESTED', 'Interested'), ('RSVP', 'RSVP'), ('SAVE', 'Save for Later')], max_length=15)),
                ('attendee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.UserProfile')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Event')),
            ],
            options={
                'verbose_name_plural': 'Event Attendees',
                'db_table': 'event_attendees',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Media'),
        ),
        migrations.AddField(
            model_name='event',
            name='tags',
            field=models.ManyToManyField(blank=True, to='database.Tag'),
        ),
        migrations.CreateModel(
            name='CommunityAdminGroup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('description', models.TextField(blank=True, max_length=10000)),
                ('community', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='database.Community')),
                ('members', models.ManyToManyField(blank=True, to='database.UserProfile')),
            ],
            options={
                'db_table': 'community_admin_group',
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='community',
            name='banner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='community_banner', to='database.Media'),
        ),
        migrations.AddField(
            model_name='community',
            name='logo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='community_logo', to='database.Media'),
        ),
        migrations.AddField(
            model_name='community',
            name='policies',
            field=models.ManyToManyField(blank=True, to='database.Policy'),
        ),
        migrations.CreateModel(
            name='BillingStatement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('amount', models.CharField(default='0.0', max_length=100)),
                ('description', models.TextField(blank=True, max_length=10000)),
                ('start_date', models.DateTimeField(blank=True, db_index=True)),
                ('end_date', models.DateTimeField(blank=True)),
                ('more_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Community')),
            ],
            options={
                'db_table': 'billing_statements',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ActionProperty',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('short_description', models.CharField(blank=True, max_length=10000)),
                ('order_position', models.PositiveSmallIntegerField(default=0)),
                ('community', models.ManyToManyField(blank=True, to='database.Community')),
            ],
            options={
                'verbose_name_plural': 'Properties',
                'db_table': 'action_properties',
                'ordering': ('order_position',),
            },
        ),
        migrations.AddField(
            model_name='action',
            name='community',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Community'),
        ),
        migrations.AddField(
            model_name='action',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Media'),
        ),
        migrations.AddField(
            model_name='action',
            name='properties',
            field=models.ManyToManyField(blank=True, to='database.ActionProperty'),
        ),
        migrations.AddField(
            model_name='action',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='action_tags', to='database.Tag'),
        ),
        migrations.AddField(
            model_name='action',
            name='vendors',
            field=models.ManyToManyField(blank=True, to='database.Vendor'),
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=10000)),
                ('description', models.TextField(blank=True, max_length=10000)),
                ('info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Community')),
                ('sections', models.ManyToManyField(blank=True, to='database.PageSection')),
            ],
            options={
                'unique_together': {('name', 'community')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='action',
            unique_together={('title', 'community')},
        ),
    ]
